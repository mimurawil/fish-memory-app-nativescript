"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var _ = require("lodash");
var Observable_1 = require("rxjs/Observable");
// Services
var fm_database_service_1 = require("../service/fm-database.service");
// Statics & Domains
var static_data_1 = require("../shared/static-data");
var FMCardService = /** @class */ (function () {
    function FMCardService(dbService) {
        this.dbService = dbService;
        this._myCards = [];
        this._filteredCards = this._myCards;
        this.fetchCards().subscribe(function (success) { });
    }
    FMCardService.prototype.fetchCards = function () {
        var _this = this;
        return Observable_1.Observable.create(function (observer) {
            _this.dbService.getAllCards()
                .then(function (result) {
                _this._myCards = [];
                result.forEach(function (row) {
                    var card = {
                        id: row[static_data_1.CardTable.ID],
                        frontText: row[static_data_1.CardTable.FRONT_TEXT],
                        backText: row[static_data_1.CardTable.BACK_TEXT]
                    };
                    _this._myCards.push(card);
                });
                observer.next(true);
                observer.complete();
            });
        });
    };
    FMCardService.prototype.clearFilter = function () {
        this._filteredCards = this._myCards;
    };
    FMCardService.prototype.filter = function (options) {
        if (options === void 0) { options = {}; }
        if (options.without) {
            this._filteredCards = _.without.apply(_, [this._myCards].concat(options.without));
        }
    };
    FMCardService.prototype.getCards = function () {
        return this._filteredCards;
    };
    FMCardService.prototype.getCard = function (id) {
        return _.find(this._myCards, function (myCard) { return myCard.id === id; });
    };
    FMCardService.prototype.addCard = function (card) {
        var _this = this;
        return Observable_1.Observable.create(function (observer) {
            _this.dbService.insertNewCard(card)
                .then(function (id) {
                card.id = id;
                _this._myCards.push(card);
                observer.next(true);
                observer.complete();
            });
        });
    };
    FMCardService.prototype.updateCard = function (card) {
        var _this = this;
        return Observable_1.Observable.create(function (observer) {
            if (!card.id) {
                observer.next(false);
                observer.complete();
            }
            else {
                _this.dbService.updateCard(card)
                    .then(function (count) {
                    var theCard = _.find(_this._myCards, function (myCard) { return myCard.id === card.id; });
                    theCard.frontText = card.frontText;
                    theCard.backText = card.backText;
                    observer.next(true);
                    observer.complete();
                });
            }
        });
    };
    FMCardService.prototype.deleteCard = function (id) {
        var _this = this;
        return Observable_1.Observable.create(function (observer) {
            _this.dbService.deleteCard(id)
                .then(function (count) {
                _.remove(_this._myCards, function (myCard) { return myCard.id === id; });
                observer.next(true);
                observer.complete();
            });
        });
    };
    FMCardService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [fm_database_service_1.FMDatabaseService])
    ], FMCardService);
    return FMCardService;
}());
exports.FMCardService = FMCardService;
//# sourceMappingURL=data:application/json;base64,