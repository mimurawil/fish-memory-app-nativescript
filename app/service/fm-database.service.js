"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
// SQLite
var SQLite = require('nativescript-sqlite');
// Statics & Domains
var static_data_1 = require("../shared/static-data");
var FMDatabaseService = /** @class */ (function () {
    function FMDatabaseService() {
        var _this = this;
        this.DBNAME = 'FishMemoryDB.db';
        this.CARD_TABLE = 'card_table';
        this.QUIZ_TABLE = 'quiz_table';
        this.QUIZ_ITEM_TABLE = 'quiz_item_table';
        // SQLite.copyDatabase(this.DBNAME);
        if (!SQLite.exists(this.DBNAME)) {
            SQLite.copyDatabase(this.DBNAME);
        }
        new SQLite(this.DBNAME, function (err, db) {
            if (!err) {
                _this._db = db;
                _this._db.resultType(SQLite.RESULTSASOBJECT);
            }
        });
    }
    // Lists card_table
    FMDatabaseService.prototype.getAllCards = function () {
        var sql = "SELECT " + static_data_1.CardTable.ID + ", " + static_data_1.CardTable.FRONT_TEXT + ", " + static_data_1.CardTable.BACK_TEXT + "\n               FROM " + this.CARD_TABLE;
        return this._db.all(sql);
    };
    // Inserts card_table. Returns id
    FMDatabaseService.prototype.insertNewCard = function (card) {
        var sql = "INSERT INTO " + this.CARD_TABLE + "\n                        (" + static_data_1.CardTable.FRONT_TEXT + "\n                        ," + static_data_1.CardTable.BACK_TEXT + ")\n                    VALUES (?\n                           ,?)";
        return this._db.execSQL(sql, [card.frontText, card.backText]);
    };
    // Updates card_table. Returns quantity of updated row(s)
    FMDatabaseService.prototype.updateCard = function (card) {
        var sql = "UPDATE " + this.CARD_TABLE + " \n                SET " + static_data_1.CardTable.FRONT_TEXT + " = ?\n                   ," + static_data_1.CardTable.BACK_TEXT + " = ?\n              WHERE " + static_data_1.CardTable.ID + " = ?";
        return this._db.execSQL(sql, [card.frontText, card.backText, card.id]);
    };
    // Deletes card_table. Returns quantity of deleted row(s)
    FMDatabaseService.prototype.deleteCard = function (id) {
        var sql = "DELETE FROM " + this.CARD_TABLE + " WHERE " + static_data_1.CardTable.ID + " = ?";
        return this._db.execSQL(sql, [id]);
    };
    // Lists quiz_table
    FMDatabaseService.prototype.getAllQuizzesWithItems = function () {
        var sql = "SELECT qt." + static_data_1.QuizTable.ID + "\n                      , qt." + static_data_1.QuizTable.TITLE + "\n                      , qit." + static_data_1.QuizItemTable.ITEM_TYPE + "\n                      , qit." + static_data_1.QuizItemTable.ITEM_ID + "\n                   FROM " + this.QUIZ_TABLE + " qt\n                  INNER JOIN " + this.QUIZ_ITEM_TABLE + " qit ON (qt." + static_data_1.QuizTable.ID + " = qit." + static_data_1.QuizItemTable.QUIZ_ID + ")";
        return this._db.all(sql);
    };
    // Inserts quiz_table. Returns id
    FMDatabaseService.prototype.insertNewQuiz = function (quiz) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var sqlQuiz = "INSERT INTO " + _this.QUIZ_TABLE + " (" + static_data_1.QuizTable.TITLE + ")\n                        VALUES (?)";
            _this._db.execSQL(sqlQuiz, [quiz.title]).then(function (id) {
                quiz.id = id;
                _this.insertNewQuizItem(quiz).then(function (result) {
                    resolve(id);
                }, function (err) { reject(err); });
            }, function (err) { reject(err); });
        });
    };
    // Inserts multiple quiz_item_table. Returns array of ids
    FMDatabaseService.prototype.insertNewQuizItem = function (quiz) {
        if (quiz.cards.length < 1) {
            return Promise.resolve([]);
        }
        var sqlQuizItem = "INSERT INTO " + this.QUIZ_ITEM_TABLE + " \n                        (" + static_data_1.QuizItemTable.QUIZ_ID + "\n                        , " + static_data_1.QuizItemTable.ITEM_TYPE + "\n                        , " + static_data_1.QuizItemTable.ITEM_ID + ")\n                    VALUES ";
        quiz.cards.forEach(function (card) {
            sqlQuizItem += "(" + quiz.id + ", \"" + static_data_1.QuizItemType.CARD + "\", " + card.id + "),";
        });
        sqlQuizItem = sqlQuizItem.slice(0, -1);
        return this._db.execSQL(sqlQuizItem);
    };
    // Updates title of quiz_table. Returns quantity of updated row(s) (just 1 if success)
    FMDatabaseService.prototype.updateQuiz = function (id, title) {
        var sql = "UPDATE " + this.QUIZ_TABLE + "\n                SET " + static_data_1.QuizTable.TITLE + " = ?\n              WHERE " + static_data_1.QuizTable.ID + " = ?";
        return this._db.execSQL(sql, title, id);
    };
    // Deletes quiz_table. Returns quantity of deleted row(s)
    FMDatabaseService.prototype.deleteQuiz = function (id) {
        var sql = "DELETE FROM " + this.QUIZ_TABLE + " WHERE " + static_data_1.QuizTable.ID + " = ?";
        return this._db.execSQL(sql, [id]);
    };
    // Deletes quiz_item_table by quiz_id. Returns quantity of deleted row(s)
    FMDatabaseService.prototype.deleteQuizItemByQuizId = function (quizId) {
        var sql = "DELETE FROM " + this.QUIZ_ITEM_TABLE + " WHERE " + static_data_1.QuizItemTable.QUIZ_ID + " = ?";
        return this._db.execSQL(sql, [quizId]);
    };
    FMDatabaseService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], FMDatabaseService);
    return FMDatabaseService;
}());
exports.FMDatabaseService = FMDatabaseService;
//# sourceMappingURL=data:application/json;base64,