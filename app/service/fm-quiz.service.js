"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Observable_1 = require("rxjs/Observable");
var _ = require("lodash");
// Services
var fm_card_service_1 = require("./fm-card.service");
var fm_database_service_1 = require("./fm-database.service");
// Statics & Domains
var static_data_1 = require("../shared/static-data");
var FMQuizService = /** @class */ (function () {
    function FMQuizService(cardService, dbService) {
        var _this = this;
        this.cardService = cardService;
        this.dbService = dbService;
        this._myQuizzes = [];
        this.clearFilter();
        this.fetchQuizzes().subscribe(function (success) { return _this._isLoading = false; });
    }
    FMQuizService.prototype.fetchQuizzes = function () {
        var _this = this;
        this._isLoading = true;
        return Observable_1.Observable.create(function (observer) {
            _this.dbService.getAllQuizzesWithItems().then(function (rows) {
                _this._myQuizzes = [];
                var quiz = { id: -1, title: '', cardIds: [] };
                var first = true;
                var lastId = -1;
                rows.forEach(function (row) {
                    if (lastId !== row[static_data_1.QuizTable.ID] && !first) {
                        _this._myQuizzes.push(quiz);
                        quiz = { id: -1, title: '', cardIds: [] };
                    }
                    lastId = row[static_data_1.QuizTable.ID];
                    first = false;
                    quiz.id = row[static_data_1.QuizTable.ID];
                    quiz.title = row[static_data_1.QuizTable.TITLE];
                    if (row[static_data_1.QuizItemTable.ITEM_TYPE] === static_data_1.QuizItemType.CARD) {
                        quiz.cardIds.push(row[static_data_1.QuizItemTable.ITEM_ID]);
                    }
                });
                if (!first) {
                    _this._myQuizzes.push(quiz);
                }
                observer.next(true);
                observer.complete();
            });
        });
    };
    FMQuizService.prototype.parseFMQuizListItem = function (fmQuiz) {
        var q = {
            id: fmQuiz.id,
            title: fmQuiz.title,
            cardIds: []
        };
        fmQuiz.cards.forEach(function (card) { return q.cardIds.push(card.id); });
        return q;
    };
    FMQuizService.prototype.clearFilter = function () {
        this._filteredQuizzes = this._myQuizzes;
    };
    FMQuizService.prototype.getQuizzes = function () {
        return this._filteredQuizzes;
    };
    FMQuizService.prototype.getQuiz = function (id) {
        var _this = this;
        var quizListItem = _.find(this._myQuizzes, function (quiz) { return quiz.id === id; });
        var result = {
            id: quizListItem.id,
            title: quizListItem.title,
            cards: []
        };
        quizListItem.cardIds.forEach(function (id) {
            result.cards.push(_this.cardService.getCard(id));
        });
        return result;
    };
    FMQuizService.prototype.addQuiz = function (quiz) {
        var _this = this;
        return Observable_1.Observable.create(function (observer) {
            _this.dbService.insertNewQuiz(quiz).then(function (id) {
                quiz.id = id;
                _this._myQuizzes.push(_this.parseFMQuizListItem(quiz));
                observer.next(true);
                observer.complete();
            });
        });
    };
    FMQuizService.prototype.updateQuiz = function (quiz) {
        var _this = this;
        return Observable_1.Observable.create(function (observer) {
            _this.dbService.updateQuiz(quiz.id, quiz.title).then(function (countQuiz) {
                _this.dbService.deleteQuizItemByQuizId(quiz.id).then(function (deleteCount) {
                    _this.dbService.insertNewQuizItem(quiz).then(function (countQuizItem) {
                        _.remove(_this._myQuizzes, function (quizItem) { return quizItem.id === quiz.id; });
                        _this._myQuizzes.push(_this.parseFMQuizListItem(quiz));
                        observer.next(true);
                        observer.complete();
                    });
                });
            });
        });
    };
    FMQuizService.prototype.deleteQuiz = function (id) {
        var _this = this;
        return Observable_1.Observable.create(function (observer) {
            _this.dbService.deleteQuiz(id).then(function (quizCount) {
                _this.dbService.deleteQuizItemByQuizId(id).then(function (quizItemCount) {
                    _.remove(_this._myQuizzes, function (quiz) { return quiz.id === id; });
                    observer.next(true);
                    observer.complete();
                });
            });
        });
    };
    FMQuizService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [fm_card_service_1.FMCardService,
            fm_database_service_1.FMDatabaseService])
    ], FMQuizService);
    return FMQuizService;
}());
exports.FMQuizService = FMQuizService;
//# sourceMappingURL=data:application/json;base64,