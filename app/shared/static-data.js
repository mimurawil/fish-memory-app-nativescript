"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DateFunctions;
(function (DateFunctions) {
    // Convert a Date to String in the right format to put into Database (SQLite)
    // Date string output: YYYY-MM-DD
    function toDBDate(fromDate) {
        return fromDate.getFullYear() + '-' +
            ('0' + (fromDate.getMonth() + 1)).substr(-2, 2) + '-' +
            ('0' + fromDate.getDate()).substr(-2, 2);
    }
    DateFunctions.toDBDate = toDBDate;
    // Reads a string in the format YYYY-MM-DD and returns a Date type
    function parseDBDate(dateString) {
        return new Date(Number.parseInt(dateString.substr(0, 4)), (Number.parseInt(dateString.substr(5, 2)) - 1), Number.parseInt(dateString.substr(8, 2)));
    }
    DateFunctions.parseDBDate = parseDBDate;
})(DateFunctions = exports.DateFunctions || (exports.DateFunctions = {}));
var QuizTypeEnum;
(function (QuizTypeEnum) {
    QuizTypeEnum[QuizTypeEnum["FlashCard"] = 0] = "FlashCard";
})(QuizTypeEnum = exports.QuizTypeEnum || (exports.QuizTypeEnum = {}));
var CurrentScreenEnum;
(function (CurrentScreenEnum) {
    CurrentScreenEnum[CurrentScreenEnum["CardsList"] = 0] = "CardsList";
    CurrentScreenEnum[CurrentScreenEnum["PlayQuiz"] = 1] = "PlayQuiz";
    CurrentScreenEnum[CurrentScreenEnum["EditCard"] = 2] = "EditCard";
    CurrentScreenEnum[CurrentScreenEnum["QuizList"] = 3] = "QuizList";
    CurrentScreenEnum[CurrentScreenEnum["EditQuiz"] = 4] = "EditQuiz";
})(CurrentScreenEnum = exports.CurrentScreenEnum || (exports.CurrentScreenEnum = {}));
/*
 * DATABASE CONSTANTS
 */
exports.CardTable = Object.freeze({
    ID: 'id',
    FRONT_TEXT: 'front_text',
    BACK_TEXT: 'back_text'
});
exports.QuizTable = Object.freeze({
    ID: 'id',
    TITLE: 'title'
});
exports.QuizItemTable = Object.freeze({
    ID: 'id',
    QUIZ_ID: 'quiz_id',
    ITEM_TYPE: 'item_type',
    ITEM_ID: 'item_id'
});
exports.QuizItemType = Object.freeze({
    CARD: 'card'
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGljLWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzdGF0aWMtZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQWlCLGFBQWEsQ0FnQjdCO0FBaEJELFdBQWlCLGFBQWE7SUFDMUIsNkVBQTZFO0lBQzdFLGlDQUFpQztJQUNqQyxrQkFBeUIsUUFBYztRQUNuQyxNQUFNLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxHQUFHLEdBQUc7WUFDL0IsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRztZQUNyRCxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUplLHNCQUFRLFdBSXZCLENBQUE7SUFFRCxrRUFBa0U7SUFDbEUscUJBQTRCLFVBQWtCO1FBQzFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FDWCxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ3hDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUM5QyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBTGUseUJBQVcsY0FLMUIsQ0FBQTtBQUNMLENBQUMsRUFoQmdCLGFBQWEsR0FBYixxQkFBYSxLQUFiLHFCQUFhLFFBZ0I3QjtBQUVELElBQVksWUFFWDtBQUZELFdBQVksWUFBWTtJQUNwQix5REFBYSxDQUFBO0FBQ2pCLENBQUMsRUFGVyxZQUFZLEdBQVosb0JBQVksS0FBWixvQkFBWSxRQUV2QjtBQUVELElBQVksaUJBTVg7QUFORCxXQUFZLGlCQUFpQjtJQUN6QixtRUFBYSxDQUFBO0lBQ2IsaUVBQVksQ0FBQTtJQUNaLGlFQUFZLENBQUE7SUFDWixpRUFBWSxDQUFBO0lBQ1osaUVBQVksQ0FBQTtBQUNoQixDQUFDLEVBTlcsaUJBQWlCLEdBQWpCLHlCQUFpQixLQUFqQix5QkFBaUIsUUFNNUI7QUFFRDs7R0FFRztBQUNVLFFBQUEsU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDbkMsRUFBRSxFQUFFLElBQUk7SUFDUixVQUFVLEVBQUUsWUFBWTtJQUN4QixTQUFTLEVBQUUsV0FBVztDQUN6QixDQUFDLENBQUM7QUFFVSxRQUFBLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ25DLEVBQUUsRUFBRSxJQUFJO0lBQ1IsS0FBSyxFQUFFLE9BQU87Q0FDakIsQ0FBQyxDQUFDO0FBRVUsUUFBQSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUN2QyxFQUFFLEVBQUUsSUFBSTtJQUNSLE9BQU8sRUFBRSxTQUFTO0lBQ2xCLFNBQVMsRUFBRSxXQUFXO0lBQ3RCLE9BQU8sRUFBRSxTQUFTO0NBQ3JCLENBQUMsQ0FBQztBQUNVLFFBQUEsWUFBWSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDdEMsSUFBSSxFQUFFLE1BQU07Q0FDZixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgbmFtZXNwYWNlIERhdGVGdW5jdGlvbnMge1xuICAgIC8vIENvbnZlcnQgYSBEYXRlIHRvIFN0cmluZyBpbiB0aGUgcmlnaHQgZm9ybWF0IHRvIHB1dCBpbnRvIERhdGFiYXNlIChTUUxpdGUpXG4gICAgLy8gRGF0ZSBzdHJpbmcgb3V0cHV0OiBZWVlZLU1NLUREXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHRvREJEYXRlKGZyb21EYXRlOiBEYXRlKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGZyb21EYXRlLmdldEZ1bGxZZWFyKCkgKyAnLScgK1xuICAgICAgICAgICAgKCcwJyArIChmcm9tRGF0ZS5nZXRNb250aCgpICsgMSkpLnN1YnN0cigtMiwgMikgKyAnLScgK1xuICAgICAgICAgICAgKCcwJyArIGZyb21EYXRlLmdldERhdGUoKSkuc3Vic3RyKC0yLCAyKTtcbiAgICB9XG5cbiAgICAvLyBSZWFkcyBhIHN0cmluZyBpbiB0aGUgZm9ybWF0IFlZWVktTU0tREQgYW5kIHJldHVybnMgYSBEYXRlIHR5cGVcbiAgICBleHBvcnQgZnVuY3Rpb24gcGFyc2VEQkRhdGUoZGF0ZVN0cmluZzogc3RyaW5nKTogRGF0ZSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShcbiAgICAgICAgICAgIE51bWJlci5wYXJzZUludChkYXRlU3RyaW5nLnN1YnN0cigwLCA0KSksXG4gICAgICAgICAgICAoTnVtYmVyLnBhcnNlSW50KGRhdGVTdHJpbmcuc3Vic3RyKDUsIDIpKSAtIDEpLFxuICAgICAgICAgICAgTnVtYmVyLnBhcnNlSW50KGRhdGVTdHJpbmcuc3Vic3RyKDgsIDIpKSk7XG4gICAgfVxufVxuXG5leHBvcnQgZW51bSBRdWl6VHlwZUVudW0ge1xuICAgIEZsYXNoQ2FyZCA9IDAsXG59XG5cbmV4cG9ydCBlbnVtIEN1cnJlbnRTY3JlZW5FbnVtIHtcbiAgICBDYXJkc0xpc3QgPSAwLFxuICAgIFBsYXlRdWl6ID0gMSxcbiAgICBFZGl0Q2FyZCA9IDIsXG4gICAgUXVpekxpc3QgPSAzLFxuICAgIEVkaXRRdWl6ID0gNCxcbn1cblxuLypcbiAqIERBVEFCQVNFIENPTlNUQU5UU1xuICovXG5leHBvcnQgY29uc3QgQ2FyZFRhYmxlID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgSUQ6ICdpZCcsXG4gICAgRlJPTlRfVEVYVDogJ2Zyb250X3RleHQnLFxuICAgIEJBQ0tfVEVYVDogJ2JhY2tfdGV4dCdcbn0pO1xuXG5leHBvcnQgY29uc3QgUXVpelRhYmxlID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgSUQ6ICdpZCcsXG4gICAgVElUTEU6ICd0aXRsZSdcbn0pO1xuXG5leHBvcnQgY29uc3QgUXVpekl0ZW1UYWJsZSA9IE9iamVjdC5mcmVlemUoe1xuICAgIElEOiAnaWQnLFxuICAgIFFVSVpfSUQ6ICdxdWl6X2lkJyxcbiAgICBJVEVNX1RZUEU6ICdpdGVtX3R5cGUnLFxuICAgIElURU1fSUQ6ICdpdGVtX2lkJ1xufSk7XG5leHBvcnQgY29uc3QgUXVpekl0ZW1UeXBlID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgQ0FSRDogJ2NhcmQnXG59KTtcbiJdfQ==